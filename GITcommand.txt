1. pwd // see the path of the repository
2. git init // create .git file
**Attention: use Notepad++ with UTF-8 without BOM to create file
3. vi readme.txt // edit the file or create the file
**i //edit mode **ESC + :wq //save and exit **ESC + :q //no save and exit
4. git add readme.txt // add the file to the "stage area"
5. git commit -m "the discribe of the modify" // commit the files to the "GIT"
6. git status // see the staus of the "working, stage and GIT areas"
7. git diff readme.txt // see the different of the change version
8. git log // see the logfiles with long commit id
9. git log --pretty=oneline // every submit log is dislayed in one line
10. git reset --hard HEAD^ // back 1 version 
**HEAD^^ // back 2 version **HEAD~100 // back 100 version
11. git reflog // display all version
12. git reset --hard 1094a(submit id) // back the submit id file
13. cat readme.txt // display the content of the file
14. git checkout -- readme.txt // cancel the changes in work area, and find back the delete file
15. git reset HEAD readme.txt // cancel the changes in stage area and back to work area
16. rm readme.txt // delet the file
17. git rm //delet in git stage area
18. git commit -m "remove readme.txt" // delete it in GIT area
19. git checkout -- readme.txt // find back the file to workarea
20. Connect with GitHub
	1) republic SSH keys add
	2) build new repository in GitHub and push the local repository to GitHub use following commands
		a) git remote add origin git@github.com:PromptRetriever/learngit.git
		b) git push -u origin master
21. git clone git@github.com:PromptRetriever/awesome-github.git // clone repository in GitHub to local folder
22. git checkout -b dev // create and switches to new branch
	**the same as 
	1) git branch dev // create new branch + 2) git checkout dev // switch to dev branch
23. git branch // see the branch status, wiht * is the current branch
24. git checkout master // switch back to master branch
25. git merge dev // merge the dev branch to master branch
26. git branch -d dev // delete the dev branch
27. git log --graph --pretty=oneline --abbrev-commit // display the log graph
28. git merge --no-ff -m "no-ff merge" dev // keep the sub-branch and create a new commit
29. git stash // buffer the task at the work area to cache area.
30. git stash list // see the task in cache area
31. git stash apply // restore the task from cache area to work area without delete stash content
32. git stash drop // delete stash content in cache area
33. git stash pop // =git stash apply + git stash drop
34. git branch -D dev // with "D" not "d", delete the branch without merged
35. git remote // see the remote repository information. e.g."origin"
36. git remote -v // see the fetch and push address, if there is not push authority, no push address!
37. git push origin master // push the master branch to remote repository
38. git push origin dev // push the dev branch to remote repository
**after clone, local2(local repository2) will be created. There is only the master branch.
39. git checkout -b dev1 origin/dev1 // get the remote branch dev1 to local2
then **git add, git commit -m "xxx", git push origin dev1**
40. git pull // get the remote dev1, which the local2 changed
41. git branch --set-upstream-to=origin/dev1 dev1 // when git pull failed, no tracking information
then build contact dev1 in local1 with remote dev1. then **git pull**.
maybe conflict create. then solve the conflict use **git add and commit**
42. git rebase // difficult to understand and using?????






